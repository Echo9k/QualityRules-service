RuleID,Code,Category,Parameters,Description,CleanedDescription,Cluster,BaseRuleID,VersionGroup
DQRA0194,"<data>.apply(lambda x: x[cde] in <#>catalog<#>[<#>key<#>].values if x[<#>Column1<#>] in <#>Lista<#> else True, axis=1)",Validity,"['catalog', 'key', 'Column1', 'Lista']","Ensures that the value in <cde> exists in a specified catalog (<#>catalog<#>) based on a key (<#>key<#>), but only if the value in <#>Column1<#> is part of a given list (<#>Lista<#>). If not in the list, the rule returns True without checking.","Ensures that the value in <cde> exists in a specified catalog () based on a key (), but only if the value in  is part of a given list (). If not in the list, the rule returns True without checking.",0,DQRA0194,0
DQRAI0094,"<data>[[cde]].apply(lambda x: True if (x[cde].startswith(<#>startIndx<#>)) else False, axis = 1)",Consistency,['startIndx'],"Verifies that the value in <cde> starts with a specified prefix (<#>startIndx<#>). Returns True if the condition is met; otherwise, returns False.","Verifies that the value in <cde> starts with a specified prefix (). Returns True if the condition is met; otherwise, returns False.",0,DQRAI0094,1
DQRC0001,"<data>.apply(lambda x: (not pd.isnull(x[cde])) & (len(str(x[cde]).strip()) > 0),axis=1)",Completeness,[],Checks that the value in <cde> is not null and contains non-whitespace characters. This ensures completeness and validity of the field.,Checks that the value in <cde> is not null and contains non-whitespace characters. This ensures completeness and validity of the field.,0,DQRC0001,2
DQRC0001_01,"<data>.apply(lambda x: (not pd.isnull(x[<#>Column1<#>])) & (len(str(x[<#>Column1<#>]).strip()) > 0),axis=1)",Completeness,"['Column1', 'Column1']",Similar to DQRC0001 but applies the completeness and validity check to <#>Column1<#> instead of <cde>.,Similar to DQRC0001 but applies the completeness and validity check to  instead of <cde>.,0,DQRC0001,2
DQRC0001_02,<data>.fillna({<#>bde_risk<#>: ' '}).apply(lambda x: (not pd.isnull(x[cde])) & (len(str(x[cde]).strip()) > 0),Completeness,['bde_risk'],"Completeness check for <cde>, where missing values are first replaced in <#>bde_risk<#> with a default value (' '), ensuring non-null and non-empty values after substitution.","Completeness check for <cde>, where missing values are first replaced in  with a default value (' '), ensuring non-null and non-empty values after substitution.",0,DQRC0001,2
DQRC0001_02_B,"<data>.fillna({bde_cis: 0, bde_risk: ' '}).apply(lambda x: (not pd.isnull(x[cde])) & (len(str(x[cde]).strip()) > 0) ((x[bde_fec]<fec_v) & (x[bde_risk]==risk_v)),axis=1)",Completeness,[],"Performs a completeness check on <cde>, with additional conditions: <bde_fec> must be less than a specific value (fec_v) and <bde_risk> must equal a specific value (risk_v). Missing values in <bde_cis> and <bde_risk> are replaced with defaults (0 and ' ', respectively).","Performs a completeness check on <cde>, with additional conditions: <bde_fec> must be less than a specific value (fec_v) and <bde_risk> must equal a specific value (risk_v). Missing values in <bde_cis> and <bde_risk> are replaced with defaults (0 and ' ', respectively).",0,DQRC0001_02_B,3
DQRC0001_03,"<data>[[<#>bde_risk<#>,cde]].apply(lambda x: str(x[cde]) in(<#>ListValues1<#>) if (str(x[<#>bde_risk<#>]) in(<#>List1<#>)) else True, axis = 1)",Other,"['bde_risk', 'ListValues1', 'bde_risk', 'List1']","Checks that <cde> belongs to a specific list of valid values (<#>ListValues1<#>) only if <#>bde_risk<#> is part of another list (<#>List1<#>). If <#>bde_risk<#> does not match the list, the rule returns True.","Checks that <cde> belongs to a specific list of valid values () only if  is part of another list (). If  does not match the list, the rule returns True.",0,DQRC0001,2
DQRC0001_4,"<data>.apply(lambda x: ((not pd.isnull(x[cde])) & (len(str(x[cde]).strip()) > 0)) if (x[<#>Column1<#>] <#>Operator1<#> <#>Value1<#>) else True,axis=1)",Completeness,"['Column1', 'Operator1', 'Value1']","Ensures <cde> is non-null and non-empty, but only if <#>Column1<#> meets a specified condition (<#>Operator1<#> <#>Value1<#>). Otherwise, the rule passes without further checks.","Ensures <cde> is non-null and non-empty, but only if  meets a specified condition ( ). Otherwise, the rule passes without further checks.",0,DQRC0001,2
DQRC0001_41,"<data>.apply(lambda x: (pd.isnull(x[cde])) if (float(x[<#>Column1<#>]) <#>Operator1<#> <#>Value1<#>) else True, axis=1)",Other,"['Column1', 'Operator1', 'Value1']",Checks for null values in <cde> only when <#>Column1<#> satisfies a numerical condition defined by <#>Operator1<#> and <#>Value1<#>.,Checks for null values in <cde> only when  satisfies a numerical condition defined by  and .,0,DQRC0001,2
DQRC0001_6,(~<data>[cde].isnull()) & (<data>[<#>Column1<#>] <#>Operator<#> <#>Value<#>),Other,"['Column1', 'Operator', 'Value']","Ensures <cde> is not null, while also verifying that <#>Column1<#> satisfies a specified condition (<#>Operator<#> <#>Value<#>).","Ensures <cde> is not null, while also verifying that  satisfies a specified condition ( ).",0,DQRC0001,2
DQRC0002,<data>[cde].apply(lambda x:len(x.split()[0])==<#>NoChars<#>),Other,['NoChars'],Validates that the first segment (before the first space) of the value in <cde> has a length equal to <#>NoChars<#>.,Validates that the first segment (before the first space) of the value in <cde> has a length equal to .,0,DQRC0002,4
DQRC0021,<data>.apply(lambda x: (pd.isnull(x[cde])),Other,[],"Checks if the value in <cde> is null. Returns True if null, and False otherwise.","Checks if the value in <cde> is null. Returns True if null, and False otherwise.",0,DQRC0021,5
DQRC0025_2,(((<data>[<#>TipoPersona<#>] == <#>Fisica<#>) & (~pd.isnull(<data>[cde]))),Other,"['TipoPersona', 'Fisica']","Ensures that if <#>TipoPersona<#> equals <#>Fisica<#>, the value in <cde> must not be null. Otherwise, the rule passes.","Ensures that if  equals , the value in <cde> must not be null. Otherwise, the rule passes.",0,DQRC0025,6
DQRC0044,"( <data>.apply(lambda x: (not pd.isnull(x[cde])) & (len(str(x[cde]).strip()) > 0),axis=1) )",Completeness,[],Checks if the value in <cde> is non-null and contains non-whitespace characters. Ensures completeness of the field.,Checks if the value in <cde> is non-null and contains non-whitespace characters. Ensures completeness of the field.,0,DQRC0044,7
DQRC0055,(((<data>[<#>TipoPersona<#>] == <#>Fisica<#>) & (~pd.isnull(<data>[cde]))),Other,"['TipoPersona', 'Fisica']","Similar to DQRC0025_2, but checks that <cde> is not null when <#>TipoPersona<#> equals <#>Fisica<#>.","Similar to DQRC0025_2, but checks that <cde> is not null when  equals .",0,DQRC0055,8
DQRC0068,<data>.apply(lambda x: (((not pd.isnull(x[<#>Column1<#>])) & (len(str(x[<#>Column1<#>]).strip()) > 0)),Completeness,"['Column1', 'Column1']",Validates that <#>Column1<#> is non-null and contains non-whitespace characters. Ensures the field is complete.,Validates that  is non-null and contains non-whitespace characters. Ensures the field is complete.,0,DQRC0068,9
DQRC0074,"<data>.apply(lambda x: ((not pd.isnull(x[<#>Column1<#>])) & (len(str(x[<#>Column1<#>]).strip()) > 0)) if ((pd.isnull(x[cde])) or (len(str(x[cde]).strip()) == 0)) else True ,axis=1)",Completeness,"['Column1', 'Column1']","Ensures <#>Column1<#> is non-null and non-empty only when <cde> is null or empty. Otherwise, the rule passes.","Ensures  is non-null and non-empty only when <cde> is null or empty. Otherwise, the rule passes.",0,DQRC0074,10
DQRC0081,"<data>.apply(lambda x: ((not pd.isnull(x[<#>Column1<#>])) & (len(str(x[<#>Column1<#>]).strip()) > 0)) if ((pd.isnull(x[cde])) or (len(str(x[cde]).strip()) == 0)) else True ,axis=1)",Completeness,"['Column1', 'Column1']","Similar to DQRC0074, but focuses on validating <#>Column1<#> only when <cde> is null or empty. Ensures consistency between the two columns.","Similar to DQRC0074, but focuses on validating  only when <cde> is null or empty. Ensures consistency between the two columns.",0,DQRC0081,11
DQRC0093,"<data>.apply(lambda x: ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) if (x[<#>Column1<#>] in (<#>Lista<#>) and x[<#>Column2<#>] in (<#>Lista1<#>) and x[<#>Column3<#>] in (<#>Lista2<#>)) else True ,axis=1)",Completeness,"['Column1', 'Lista', 'Column2', 'Lista1', 'Column3', 'Lista2']","Checks that <cde> is non-null and non-empty when <#>Column1<#>, <#>Column2<#>, and <#>Column3<#> all belong to their respective lists <#>Lista<#>, <#>Lista1<#>, and <#>Lista2<#>. Otherwise, the rule passes.","Checks that <cde> is non-null and non-empty when , , and  all belong to their respective lists , , and . Otherwise, the rule passes.",0,DQRC0093,12
DQRC0094,"<data>.apply(lambda x: ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) if (x[<#>Column1<#>] in (<#>Lista<#>) and x[<#>Column2<#>] in (<#>Lista1<#>)) else True ,axis=1)",Completeness,"['Column1', 'Lista', 'Column2', 'Lista1']",Similar to DQRC0093 but considers only <#>Column1<#> and <#>Column2<#> against <#>Lista<#> and <#>Lista1<#>. Ensures <cde> is non-null and non-empty if the condition is met.,Similar to DQRC0093 but considers only  and  against  and . Ensures <cde> is non-null and non-empty if the condition is met.,0,DQRC0094,13
DQRC0118,"<data>.apply(lambda x: ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) if ((not pd.isnull(x[<#>Column1<#>])) & (len(str(x[<#>Column1<#>]).strip()) > 1) and (not pd.isnull(x[<#>Column2<#>])) & (len(str(x[<#>Column2<#>]).strip()) > 1) and (not pd.isnull(x[<#>Column3<#>])) & (len(str(x[<#>Column3<#>]).strip()) > 0)) else True ,axis=1)",Completeness,"['Column1', 'Column1', 'Column2', 'Column2', 'Column3', 'Column3']","Ensures that <cde> is non-null and non-empty, but only if <#>Column1<#>, <#>Column2<#>, and <#>Column3<#> are all non-null and meet their respective minimum character length conditions. If any of these conditions are not met, the rule passes.","Ensures that <cde> is non-null and non-empty, but only if , , and  are all non-null and meet their respective minimum character length conditions. If any of these conditions are not met, the rule passes.",0,DQRC0118,14
DQRC0120,"<data>.apply(lambda x: (str(x[cde]).strip() != 'None') if ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) else True ,axis=1)",Completeness,[],Validates that the value in <cde> is neither null nor the string 'None'. This ensures the field contains valid and meaningful data.,Validates that the value in <cde> is neither null nor the string 'None'. This ensures the field contains valid and meaningful data.,0,DQRC0120,15
DQRC0179,"<data>.apply(lambda x: ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) if str(x[<#>Column1<#>])=='MEXICO' else True ,axis=1)",Completeness,['Column1'],"Ensures <cde> is non-null and non-empty when <#>Column1<#> equals 'MEXICO'. Otherwise, the rule passes without validation.","Ensures <cde> is non-null and non-empty when  equals 'MEXICO'. Otherwise, the rule passes without validation.",0,DQRC0179,16
DQRC0274,"<data>.apply(lambda x: ((not pd.isnull(x[<#>Column1<#>])) & (len(str(x[<#>Column1<#>]).strip()) > 0)) if ((pd.isnull(x[cde])) or (len(str(x[cde]).strip()) == 0)) else True ,axis=1)",Completeness,"['Column1', 'Column1']",Validates <#>Column1<#> to be non-null and non-empty only when <cde> is null or empty. Ensures consistency between the two columns.,Validates  to be non-null and non-empty only when <cde> is null or empty. Ensures consistency between the two columns.,0,DQRC0274,17
DQRCY0012,<data>[cde].str.strip() <#>Operator<#> <data>[<#>Column1<#>].str.strip(),Completeness,"['Operator', 'Column1']",Compares the stripped string value of <cde> against the stripped value of <#>Column1<#> using a specified operator (<#>Operator<#>). Ensures both fields meet the operator condition.,Compares the stripped string value of <cde> against the stripped value of  using a specified operator (). Ensures both fields meet the operator condition.,0,DQRCY0012,18
DQRCY0013,<data>[cde] <#>Operator<#> <data>[<#>Column1<#>],Other,"['Operator', 'Column1']",Compares the value of <cde> against <#>Column1<#> using a specified operator (<#>Operator<#>). Validates their relationship based on the operator.,Compares the value of <cde> against  using a specified operator (). Validates their relationship based on the operator.,0,DQRCY0013,19
DQRCY0013_1,"<data>[[cde,<#>Column1<#>,<#>Column2<#>]].astype(float).apply(lambda x: x[cde] <#>Operator1<#> x[<#>Column2<#>] if x[<#>Column1<#>] in <#>ListValues1<#> else True, axis=1)",Validity,"['Column1', 'Column2', 'Operator1', 'Column2', 'Column1', 'ListValues1']","Validates <cde> against <#>Column2<#> using a specified operator (<#>Operator1<#>), but only if <#>Column1<#> belongs to a given list (<#>ListValues1<#>). Otherwise, the rule passes.","Validates <cde> against  using a specified operator (), but only if  belongs to a given list (). Otherwise, the rule passes.",0,DQRCY0013,19
DQRCY0017,<data>[cde].astype(float) <#>Operator<#> <data>[<#>Column1<#>].astype(float),Other,"['Operator', 'Column1']",Compares the float value of <cde> against the float value of <#>Column1<#> using a specified operator (<#>Operator<#>). Ensures numerical consistency between the fields.,Compares the float value of <cde> against the float value of  using a specified operator (). Ensures numerical consistency between the fields.,0,DQRCY0017,20
DQRCY0020,(<data>[<#>Column1<#>].isin([<#>ListValues1<#>])) & (<data>[cde].astype(str).isin([<#>ListValues2<#>])),Validity,"['Column1', 'ListValues1', 'ListValues2']",Checks that <#>Column1<#> is in a list of valid values (<#>ListValues1<#>) and <cde> belongs to another list (<#>ListValues2<#>). Both conditions must be met for the rule to pass.,Checks that  is in a list of valid values () and <cde> belongs to another list (). Both conditions must be met for the rule to pass.,0,DQRCY0020,21
DQRCY0027,cde = DataElement,Other,[],"Specifies that the column <cde> corresponds to the data element ""DataElement."" This acts as a metadata mapping rule.","Specifies that the column <cde> corresponds to the data element ""DataElement."" This acts as a metadata mapping rule.",0,DQRCY0027,22
DQRCY0042,"( (<data>[<#>TipoPersona<#>] == <#>Fisica<#>) & ( <data>.fillna('~').apply(lambda x: re.findall(x[cde]+'$',(x[<#>Column1<#>])),axis=1).astype(bool)))",Other,"['TipoPersona', 'Fisica', 'Column1']","Ensures that if <#>TipoPersona<#> equals <#>Fisica<#>, then the value in <cde> should match the end of the value in <#>Column1<#>. Null values in <#>Column1<#> are replaced with ~ before checking.","Ensures that if  equals , then the value in <cde> should match the end of the value in . Null values in  are replaced with ~ before checking.",0,DQRCY0042,23
DQRCY0043,"( (<data>[<#>TipoPersona<#>] == <#>Fisica<#>) & ( <data>.fillna('~').apply(lambda x: re.findall('^'+x[cde],(x[<#>Column1<#>])),axis=1).astype(bool)))",Other,"['TipoPersona', 'Fisica', 'Column1']","Ensures that if <#>TipoPersona<#> equals <#>Fisica<#>, then the value in <cde> should match the beginning of the value in <#>Column1<#>. Null values in <#>Column1<#> are replaced with ~ before checking.","Ensures that if  equals , then the value in <cde> should match the beginning of the value in . Null values in  are replaced with ~ before checking.",0,DQRCY0043,24
DQRCY0053,"<data>.apply(lambda x: (datetime.strptime(x[cde],<#>frmtCDEDte<#>) - datetime.strptime(x[<#>Column1<#>],<#>frmtColumnDte<#>)).days == 0,axis=1)",Other,"['frmtCDEDte', 'Column1', 'frmtColumnDte']","Checks if the date in <cde> matches the date in <#>Column1<#>, ensuring the difference in days between the two dates is zero. The comparison uses specified date formats <#>frmtCDEDte<#> and <#>frmtColumnDte<#>.","Checks if the date in <cde> matches the date in , ensuring the difference in days between the two dates is zero. The comparison uses specified date formats  and .",0,DQRCY0053,25
DQRCY0054,( (<data>[<#>TipoPersona<#>] == <#>Fisica<#>) & ( <data>[cde] == <data>[<#>Column1<#>] ) ),Other,"['TipoPersona', 'Fisica', 'Column1']","Ensures that if <#>TipoPersona<#> equals <#>Fisica<#>, the value in <cde> must be equal to the value in <#>Column1<#>.","Ensures that if  equals , the value in <cde> must be equal to the value in .",0,DQRCY0054,26
DQRCY0061,"(<data>.fillna('~').apply(lambda x: re.findall('^['+x[cde]+']',(x[<#>Column1<#>])),axis=1).astype(bool))",Other,['Column1'],Validates that the beginning characters of <#>Column1<#> match any characters in <cde>. Null values in <#>Column1<#> are replaced with ~ before the match.,Validates that the beginning characters of  match any characters in <cde>. Null values in  are replaced with ~ before the match.,0,DQRCY0061,27
DQRCY0062,"(<data>.fillna('~').apply(lambda x: re.findall('['+x[cde]+']$',(x[<#>Column1<#>])),axis=1).astype(bool))",Other,['Column1'],Validates that the ending characters of <#>Column1<#> match any characters in <cde>. Null values in <#>Column1<#> are replaced with ~ before the match.,Validates that the ending characters of  match any characters in <cde>. Null values in  are replaced with ~ before the match.,0,DQRCY0062,28
DQRCY0073,"<data>[[cde,<#>Column1<#>]].fillna('').apply(lambda x: x[cde] <#>Operator<#> x[<#>Column1<#>] if ( re.search(<#>pattern<#>,x[<#>Column1<#>]) ) or len(str(x[cde])) > 0 else True ,axis=1).astype(bool)",Other,"['Column1', 'Operator', 'Column1', 'pattern', 'Column1']",Compares <cde> and <#>Column1<#> using a specified operator (<#>Operator<#>) if <#>Column1<#> matches a given pattern (<#>pattern<#>) or <cde> is non-empty. Null values are replaced with an empty string for validation.,Compares <cde> and  using a specified operator () if  matches a given pattern () or <cde> is non-empty. Null values are replaced with an empty string for validation.,0,DQRCY0073,29
DQRCY0091,"(<data>.fillna('~').apply(lambda x: re.findall('^'+re.sub(""*",Other,[],"Ensures that the beginning of <#>Column1<#> matches a transformed version of <cde>, with a placeholder for incomplete pattern logic.","Ensures that the beginning of  matches a transformed version of <cde>, with a placeholder for incomplete pattern logic.",0,DQRCY0091,30
DQRCY0092,"(<data>.fillna('~').apply(lambda x: re.findall('['+x[cde]+']$',(x[<#>Column1<#>])),axis=1).astype(bool))",Other,['Column1'],Checks if the ending characters of <#>Column1<#> match any characters in <cde>. Null values in <#>Column1<#> are replaced with ~ before the match.,Checks if the ending characters of  match any characters in <cde>. Null values in  are replaced with ~ before the match.,0,DQRCY0092,31
DQRCY0093,"<data>.apply(lambda x: all(word.upper() in x[<#>Column1<#>].upper() for word in x[cde].split(' ')),axis=1)",Other,['Column1'],"Verifies that every word in <cde> exists in <#>Column1<#>, ignoring case sensitivity. Ensures all words are found in the target column.","Verifies that every word in <cde> exists in , ignoring case sensitivity. Ensures all words are found in the target column.",0,DQRCY0093,32
DQRCY0094,"ExecutionRules.sameValue(self,<#>ColumnID<#>,cde)",Other,['ColumnID'],"Ensures that the values in <cde> and <#>ColumnID<#> are the same, leveraging the ExecutionRules.sameValue function for comparison.","Ensures that the values in <cde> and  are the same, leveraging the ExecutionRules.sameValue function for comparison.",0,DQRCY0094,33
DQRCY0095,(<data>.groupby(cde)[<#>Column<#>].transform(lambda x: x.nunique()) == 1),Other,['Column'],"Validates that all values within a group, defined by <cde>, are unique in <#>Column<#>. This ensures consistency within each group.","Validates that all values within a group, defined by <cde>, are unique in . This ensures consistency within each group.",0,DQRCY0095,34
DQRCY0096,(<data>.assign(combined_ID = lambda x: x[<#>Column1<#>].astype(str) + '-' + x[<#>Column2<#>].astype(str)). groupby(cde)['combined_ID'].transform('nunique').eq(1)),Other,"['Column1', 'Column2']","Ensures that for each group defined by <cde>, the combination of values in <#>Column1<#> and <#>Column2<#> is unique. A unique identifier is created by concatenating these two columns.","Ensures that for each group defined by <cde>, the combination of values in  and  is unique. A unique identifier is created by concatenating these two columns.",0,DQRCY0096,35
DQRCY0097,(<data>.assign(combined_ID = lambda x: x[<#>Column1<#>].astype(str) + '-' + x[<#>Column2<#>].astype(str)). groupby('combined_ID')[cde].transform('nunique').eq(1)),Other,"['Column1', 'Column2']","Validates that for each unique combination of <#>Column1<#> and <#>Column2<#>, the values in <cde> are unique. A combined identifier is created for grouping.","Validates that for each unique combination of  and , the values in <cde> are unique. A combined identifier is created for grouping.",0,DQRCY0097,36
DQRCY0098,(<data>.assign(combined_ID = lambda x: x[<#>Column1<#>].astype(str) + '-' + x[<#>Column2<#>].astype(str) + '-' + x[<#>Column3<#>].astype(str)). groupby(cde)['combined_ID'].transform('nunique').eq(1)),Other,"['Column1', 'Column2', 'Column3']","Similar to DQRCY0096 but includes <#>Column3<#> in the unique identifier. Ensures the combination of <#>Column1<#>, <#>Column2<#>, and <#>Column3<#> is unique for each <cde>.","Similar to DQRCY0096 but includes  in the unique identifier. Ensures the combination of , , and  is unique for each <cde>.",0,DQRCY0098,37
DQRCY0099,(<data>.assign(combined_ID = lambda x: x[<#>Column1<#>].astype(str) + '-' + x[<#>Column2<#>].astype(str) + '-' + x[<#>Column2<#>].astype(str)). groupby('combined_ID')[cde].transform('nunique').eq(1)),Other,"['Column1', 'Column2', 'Column2']","Similar to DQRCY0097 but includes <#>Column3<#> in the unique identifier. Validates that for each unique combination of <#>Column1<#>, <#>Column2<#>, and <#>Column3<#>, the values in <cde> are unique.","Similar to DQRCY0097 but includes  in the unique identifier. Validates that for each unique combination of , , and , the values in <cde> are unique.",0,DQRCY0099,38
DQRCY0100,"<data>.apply(lambda x: False if x[<#>Column1<#>] not in <#>List<#> and float(x[cde]) % 1 != 0 else True, axis = 1)",Validity,"['Column1', 'List']","Checks that if <#>Column1<#> is not in a specified list (<#>List<#>), the value in <cde> must be a whole number. Ensures compliance with specific numeric constraints based on the column condition.","Checks that if  is not in a specified list (), the value in <cde> must be a whole number. Ensures compliance with specific numeric constraints based on the column condition.",0,DQRCY0100,39
DQRF0005,"<data>.apply(lambda x: (len(str(x[cde]).strip()) <#>Operator<#> int(<#>length<#>)),axis=1)",Completeness,"['Operator', 'length']",Validates that the length of the value in <cde> satisfies the specified condition (<#>Operator<#>) relative to a threshold (<#>length<#>). Ensures compliance with length constraints.,Validates that the length of the value in <cde> satisfies the specified condition () relative to a threshold (). Ensures compliance with length constraints.,0,DQRF0005,40
DQRF0005_01,"<data>.apply(lambda x: (len(str(x[cde]).strip()) <#>Operator1<#> int(<#>length1<#>)) if (x[<#>Column1<#>]==<#>pais<#>) else (len(str(x[cde]).strip())<#>Operator2<#> int(<#>length2<#>)),axis=1)",Completeness,"['Operator1', 'length1', 'Column1', 'pais', 'Operator2', 'length2']","Checks the length of <cde> based on the value in <#>Column1<#>. If <#>Column1<#> equals <#>pais<#>, one operator and threshold (<#>Operator1<#> and <#>length1<#>) are applied; otherwise, a different operator and threshold (<#>Operator2<#> and <#>length2<#>) are used.","Checks the length of <cde> based on the value in . If  equals , one operator and threshold ( and ) are applied; otherwise, a different operator and threshold ( and ) are used.",0,DQRF0005,40
DQRF0005_02,"<data>.apply(lambda x: ((len(str(x[cde]).strip()) <#>Operator<#> int(<#>length<#>)) or (x[cde] == <#>ConditionalStr<#> )),axis=1)",Completeness,"['Operator', 'length', 'ConditionalStr']","Ensures the length of <cde> satisfies the specified condition (<#>Operator<#> and <#>length<#>), or that <cde> equals a specific string (<#>ConditionalStr<#>).","Ensures the length of <cde> satisfies the specified condition ( and ), or that <cde> equals a specific string ().",0,DQRF0005,40
DQRF0005_03,((<data>[cde].str.len() <#>Operator<#> <#>length<#>) & (<data>[<#>Column1<#>].isin(<#>lista<#>))),Validity,"['Operator', 'length', 'Column1', 'lista']",Validates that the length of <cde> satisfies the specified condition (<#>Operator<#> and <#>length<#>) only if <#>Column1<#> is in a specified list (<#>lista<#>).,Validates that the length of <cde> satisfies the specified condition ( and ) only if  is in a specified list ().,0,DQRF0005,40
DQRF0006,"<data>.apply(lambda x:(len(str(x[cde]).strip()) <#>Operator1<#> <#>length_min<#>) & (len(str(x[cde]).strip()) <#>Operator2<#> <#>length_max<#>),axis=1)",Completeness,"['Operator1', 'length_min', 'Operator2', 'length_max']","Ensures that the length of the value in <cde> falls between <#>length_min<#> and <#>length_max<#>, satisfying conditions <#>Operator1<#> and <#>Operator2<#> for the lower and upper bounds, respectively.","Ensures that the length of the value in <cde> falls between  and , satisfying conditions  and  for the lower and upper bounds, respectively.",0,DQRF0006,41
DQRF0006_02,"<data>.apply(lambda x: (not pd.isnull(x[cde])) & ((len(str(x[cde]).strip()) <#>Operator1<#> <#>length_min<#>) & (len(str(x[cde]).strip()) <#>Operator2<#> <#>length_max<#>)),axis=1)",Completeness,"['Operator1', 'length_min', 'Operator2', 'length_max']",Similar to DQRF0006 but includes an additional check that <cde> is not null. This ensures non-null values within the specified length range.,Similar to DQRF0006 but includes an additional check that <cde> is not null. This ensures non-null values within the specified length range.,0,DQRF0006,41
DQRF0006_03,<data>.apply(lambda x:((len(str(x[cde]).strip()) >= 1 ) & (len(str(x[cde]).strip()) <= 1 )),Completeness,[],"Validates that the length of <cde> is exactly 1 character, ensuring it meets both lower (>= 1) and upper (<= 1) bounds.","Validates that the length of <cde> is exactly 1 character, ensuring it meets both lower (>= 1) and upper (<= 1) bounds.",0,DQRF0006,41
DQRF0010,^[A-Z0-9]+$,Other,[],"Checks if the value in <cde> contains only uppercase alphanumeric characters (A-Z, 0-9) with no special characters or spaces.","Checks if the value in <cde> contains only uppercase alphanumeric characters (A-Z, 0-9) with no special characters or spaces.",0,DQRF0010,42
DQRF0015,^[A-Z0-9Ã‘]+$,Other,[],"Similar to DQRF0010 but allows the inclusion of the Spanish letter ""Ñ"". Ensures uppercase alphanumeric values.","Similar to DQRF0010 but allows the inclusion of the Spanish letter ""Ñ"". Ensures uppercase alphanumeric values.",0,DQRF0015,43
DQRF0026,^[A-Z0-9Ã‘]+[A-Z0-9Ã‘ ]*$,Other,[],"Validates that <cde> starts with uppercase alphanumeric characters (A-Z, 0-9, Ñ) and may optionally end with spaces or uppercase alphanumeric characters.","Validates that <cde> starts with uppercase alphanumeric characters (A-Z, 0-9, Ñ) and may optionally end with spaces or uppercase alphanumeric characters.",0,DQRF0026,44
DQRF0028,^[A-ZÃ‘]+[A-ZÃ‘ ]*$,Other,[],"Ensures <cde> contains only uppercase alphabetic characters (A-Z, Ñ) and optional spaces.","Ensures <cde> contains only uppercase alphabetic characters (A-Z, Ñ) and optional spaces.",0,DQRF0028,45
DQRF0029,,Other,[],Checks if the value in <cde> is NaN (not a number). This rule ensures proper identification of missing values.,Checks if the value in <cde> is NaN (not a number). This rule ensures proper identification of missing values.,0,DQRF0029,46
DQRF0030,"[A]{3,}",Other,[],"Validates that the value in <cde> contains at least three consecutive ""A"" characters.","Validates that the value in <cde> contains at least three consecutive ""A"" characters.",0,DQRF0030,47
DQRF0031,.ING..,Other,[],"Ensures that <cde> contains the substring ""ING"" surrounded by any two characters on either side (e.g., ""xINGx"").","Ensures that <cde> contains the substring ""ING"" surrounded by any two characters on either side (e.g., ""xINGx"").",0,DQRF0031,48
DQRF0033,[A-HJ-NP-XZa-hj-np-xzÃ±Ã‘]{1},Other,[],"Validates that <cde> contains exactly one character from the range A-H, J-N, P-X, Z, and their lowercase counterparts, including ""Ñ"" and ""ñ"".","Validates that <cde> contains exactly one character from the range A-H, J-N, P-X, Z, and their lowercase counterparts, including ""Ñ"" and ""ñ"".",0,DQRF0033,49
DQRF0034,"[A]{3,}",Other,[],"Similar to DQRF0030 but explicitly checks for at least three consecutive ""A"" characters in <cde>.","Similar to DQRF0030 but explicitly checks for at least three consecutive ""A"" characters in <cde>.",0,DQRF0034,50
DQRF0037,"<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,str(x[cde])),axis=1).astype(bool)",Other,['pattern'],Applies a regex pattern (<#>pattern<#>) to validate the value in <cde>. Null values are replaced with an empty string before applying the regex.,Applies a regex pattern () to validate the value in <cde>. Null values are replaced with an empty string before applying the regex.,0,DQRF0037,51
DQRF0037_01,"<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,str(x[cde])),axis=1).astype(bool)",Other,['pattern'],"Similar to DQRF0037, validates <cde> against the provided regex pattern (<#>pattern<#>), replacing nulls with an empty string.","Similar to DQRF0037, validates <cde> against the provided regex pattern (), replacing nulls with an empty string.",0,DQRF0037,51
DQRF0037_02,"<data>.replace('Ãƒ_x0091_Ã‚_x0091_','Ã‘',regex =True).apply(lambda x: re.search('^[A-ZÃ‘0-9]+[A-ZÃ‘0-9 -\/]*$',str(x[cde])),axis=1).astype(bool)",Other,[],"Ensures <cde> matches the regex pattern ^[A-ZÑ0-9]+[A-ZÑ0-9 -/]*$, allowing uppercase alphanumerics, ""Ñ"", and optional spaces or specific special characters (e.g., -, /). Replaces incorrect encoding for ""Ñ"" (Ã‘Â‘) before validation.","Ensures <cde> matches the regex pattern ^[A-ZÑ0-9]+[A-ZÑ0-9 -/]*$, allowing uppercase alphanumerics, ""Ñ"", and optional spaces or specific special characters (e.g., -, /). Replaces incorrect encoding for ""Ñ"" (Ã‘Â‘) before validation.",0,DQRF0037,51
DQRF0037_03,"<data>.apply(lambda x: re.search('^[A-Z\ ]+$',str(x[cde])) if len(str(x[cde]).strip()) > 0 else True,axis=1).astype(bool)",Completeness,[],"Ensures that <cde> contains only uppercase alphabetic characters (A-Z) and spaces. If <cde> is empty or null, the rule passes.","Ensures that <cde> contains only uppercase alphabetic characters (A-Z) and spaces. If <cde> is empty or null, the rule passes.",0,DQRF0037,51
DQRF0037_04,"<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,str(x[cde])) if (not pd.isnull(x[cde])) & (len(str(x[cde]).strip()) > 0) else True,axis=1).astype(bool)",Completeness,['pattern'],Applies a regex pattern (<#>pattern<#>) to validate <cde> only if it is not null and non-empty. Null or empty values are considered valid by default.,Applies a regex pattern () to validate <cde> only if it is not null and non-empty. Null or empty values are considered valid by default.,0,DQRF0037,51
DQRF0037_05,"<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,str(x[cde].strip())),axis=1).astype(bool)",Completeness,['pattern'],Validates <cde> against a regex pattern (<#>pattern<#>) after stripping whitespace. Replaces null values with an empty string before validation.,Validates <cde> against a regex pattern () after stripping whitespace. Replaces null values with an empty string before validation.,0,DQRF0037,51
DQRF0037_5,"(<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>, str(x[cde])) if (x[<#>Column1<#>] in (<#>lista<#>)) else True, axis = 1).astype(bool))",Other,"['pattern', 'Column1', 'lista']","Ensures <cde> matches a regex pattern (<#>pattern<#>) only if <#>Column1<#> belongs to a specified list (<#>lista<#>). Otherwise, the rule passes without validation.","Ensures <cde> matches a regex pattern () only if  belongs to a specified list (). Otherwise, the rule passes without validation.",0,DQRF0037,51
DQRF0038,"~<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,x[cde]),axis=1).astype(bool)",Other,['pattern'],Ensures that <cde> does not match the specified regex pattern (<#>pattern<#>). Null values are replaced with an empty string before applying the pattern.,Ensures that <cde> does not match the specified regex pattern (). Null values are replaced with an empty string before applying the pattern.,0,DQRF0038,52
DQRF0038_01,"~<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,x[cde]),axis=1).astype(bool)",Other,['pattern'],"Similar to DQRF0038, ensures <cde> does not match the specified regex pattern (<#>pattern<#>). Null values are handled as empty strings.","Similar to DQRF0038, ensures <cde> does not match the specified regex pattern (). Null values are handled as empty strings.",0,DQRF0038,52
DQRF0039,"(( <data>.fillna('').apply(lambda x: (re.search(<#>Pattern<#>,x[cde])),axis=1).astype(bool)) & (<data>[<#>Column1<#>] == <#>Fisica<#>)",Other,"['Pattern', 'Column1', 'Fisica']",Validates that <cde> matches a regex pattern (<#>Pattern<#>) only if <#>Column1<#> equals <#>Fisica<#>. Ensures consistency between the field and the specified condition.,Validates that <cde> matches a regex pattern () only if  equals . Ensures consistency between the field and the specified condition.,0,DQRF0039,53
DQRF0040,(~<data>[cde].fillna('').str.contains(<#>Lista<#>) & <data>[<#>Column1<#>] == int(<#>Fisica<#>) ),Other,"['Lista', 'Column1', 'Fisica']",Ensures <cde> does not contain any value from a specified list (<#>Lista<#>) only when <#>Column1<#> equals the integer value <#>Fisica<#>.,Ensures <cde> does not contain any value from a specified list () only when  equals the integer value .,0,DQRF0040,54
DQRF0041,"(~<data>.fillna('').apply(lambda x: (re.search(<#>Pattern<#>,x[cde])),axis=1).astype(bool) & <data>[<#>Column1<#>] == int(<#>Fisica<#>) )",Other,"['Pattern', 'Column1', 'Fisica']",Similar to DQRF0039 but ensures <cde> does not match the regex pattern (<#>Pattern<#>) when <#>Column1<#> equals the integer value <#>Fisica<#>.,Similar to DQRF0039 but ensures <cde> does not match the regex pattern () when  equals the integer value .,0,DQRF0041,55
DQRF0045,"<data>[[cde,<#>TipoPersona<#>]].fillna('').apply(lambda x: re.search(<#>patternF<#>,x[cde]) if ( x[<#>TipoPersona<#>] == <#>Fisica<#>) else re.search(<#>patternM<#>,x[cde]) ,axis=1).astype(bool)",Other,"['TipoPersona', 'patternF', 'TipoPersona', 'Fisica', 'patternM']","Validates <cde> against one of two regex patterns depending on <#>TipoPersona<#>. If <#>TipoPersona<#> equals <#>Fisica<#>, it uses <#>patternF<#>, otherwise <#>patternM<#>. Null values are replaced with an empty string before validation.","Validates <cde> against one of two regex patterns depending on . If  equals , it uses , otherwise . Null values are replaced with an empty string before validation.",0,DQRF0045,56
DQRF0069,"<data>.apply(lambda x: (len(str(x[cde]).strip()) <#>Operator<#> int(<#>length<#>)) if ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) else True ,axis=1)",Completeness,"['Operator', 'length']","Checks that the length of <cde> satisfies a specified condition (<#>Operator<#> and <#>length<#>), but only if <cde> is not null or empty. Otherwise, the rule passes.","Checks that the length of <cde> satisfies a specified condition ( and ), but only if <cde> is not null or empty. Otherwise, the rule passes.",0,DQRF0069,57
DQRF0070,"<data>.apply(lambda x: re.search(<#>pattern<#>,x[cde]) if ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) else True ,axis=1).astype(bool)",Completeness,['pattern'],"Validates <cde> against a regex pattern (<#>pattern<#>), but only if <cde> is not null or empty. Null or empty values are considered valid by default.","Validates <cde> against a regex pattern (), but only if <cde> is not null or empty. Null or empty values are considered valid by default.",0,DQRF0070,58
DQRF0071,"<data>[[cde,<#>Column1<#>]].fillna('').apply(lambda x: ( (len(str(x[<#>Column1<#>])) > 0) & ( datetime.strptime(str(x[<#>Column1<#>])[<#>indexC1S<#>:<#>indexC1E<#>]+str(x[cde])[<#>indexCDES<#>:<#>indexCDEE<#>],<#>frmtDte1<#>) == datetime.strptime(str(x[<#>Column1<#>]),<#>frmtDte1<#>) ) )",Other,"['Column1', 'Column1', 'Column1', 'indexC1S', 'indexC1E', 'indexCDES', 'indexCDEE', 'frmtDte1', 'Column1', 'frmtDte1']",Ensures that a substring from <#>Column1<#> (defined by indexes <#>indexC1S<#> and <#>indexC1E<#>) concatenated with a substring from <cde> (defined by <#>indexCDES<#> and <#>indexCDEE<#>) matches the date format <#>frmtDte1<#>. Compares this against the date in <#>Column1<#>.,Ensures that a substring from  (defined by indexes  and ) concatenated with a substring from <cde> (defined by  and ) matches the date format . Compares this against the date in .,0,DQRF0071,59
DQRF0072,"<data>[[cde,<#>Column1<#>]].fillna('').apply(lambda x: ( (len(str(x[<#>Column1<#>])) > 0) & ( datetime.strptime(str(x[cde])[<#>indexCDES<#>:<#>indexCDEE<#>],<#>frmtDte1<#>) == datetime.strptime(str(x[<#>Column1<#>])[<#>indexC1S<#>:<#>indexC1E<#>],<#>frmtDte1<#>) ) )",Other,"['Column1', 'Column1', 'indexCDES', 'indexCDEE', 'frmtDte1', 'Column1', 'indexC1S', 'indexC1E', 'frmtDte1']","Ensures that a substring from <cde> (defined by <#>indexCDES<#> and <#>indexCDEE<#>) matches a substring from <#>Column1<#> (defined by <#>indexC1S<#> and <#>indexC1E<#>), both formatted as <#>frmtDte1<#>. Validates the consistency of the date information.","Ensures that a substring from <cde> (defined by  and ) matches a substring from  (defined by  and ), both formatted as . Validates the consistency of the date information.",0,DQRF0072,60
DQRF0075,"<data>.apply(lambda x: (len(str(x[cde]).strip()) <#>Operator1<#> <#>length_min<#>) & (len(str(x[cde]).strip()) <#>Operator2<#> <#>length_max<#>) if ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) else True ,axis=1)",Completeness,"['Operator1', 'length_min', 'Operator2', 'length_max']","Checks that the length of <cde> falls between <#>length_min<#> and <#>length_max<#> using conditions <#>Operator1<#> and <#>Operator2<#>, but only if <cde> is not null or empty. Otherwise, the rule passes.","Checks that the length of <cde> falls between  and  using conditions  and , but only if <cde> is not null or empty. Otherwise, the rule passes.",0,DQRF0075,61
DQRF0077,"<data>.fillna('00000000').apply(lambda x: (int(str(x[cde])[0:4]) >= <#>year<#> ) & ( (int(str(x[cde])[4:6]) <= 12) & (int(str(x[cde])[4:6]) >= 1)) & ( (int(str(x[cde])[6:8]) <= 31) & (int(str(x[cde])[6:8]) >= 1)),axis=1).astype(bool)",Other,['year'],"Validates that <cde> represents a valid date in the format YYYYMMDD. Checks that the year is greater than or equal to <#>year<#>, the month is between 1 and 12, and the day is between 1 and 31. Null values are replaced with '00000000' before validation.","Validates that <cde> represents a valid date in the format YYYYMMDD. Checks that the year is greater than or equal to , the month is between 1 and 12, and the day is between 1 and 31. Null values are replaced with '00000000' before validation.",0,DQRF0077,62
DQRF0078,"<data>.fillna('99999999').apply(lambda x: int(str(x[cde])[0:4]) <= int(str(x[<#>Column1<#>])[0:4]),axis=1).astype(bool)",Other,['Column1'],Ensures that the year part of <cde> (first 4 digits) is less than or equal to the year part of <#>Column1<#>. Null values in <cde> are replaced with '99999999' before validation.,Ensures that the year part of <cde> (first 4 digits) is less than or equal to the year part of . Null values in <cde> are replaced with '99999999' before validation.,0,DQRF0078,63
DQRF0079,"<data>.apply(lambda x: (str(x[cde])[<#>CDESIndex<#>:<#>CDEEIndex<#>] == str(x[<#>Column1<#>])[<#>ColSIndex<#>:<#>ColEIndex<#>]) if ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) else True ,axis=1).astype(bool)",Completeness,"['CDESIndex', 'CDEEIndex', 'Column1', 'ColSIndex', 'ColEIndex']","Validates that a substring of <cde> (defined by <#>CDESIndex<#> and <#>CDEEIndex<#>) matches a substring of <#>Column1<#> (defined by <#>ColSIndex<#> and <#>ColEIndex<#>), but only if <cde> is not null or empty. Null or empty values pass by default.","Validates that a substring of <cde> (defined by  and ) matches a substring of  (defined by  and ), but only if <cde> is not null or empty. Null or empty values pass by default.",0,DQRF0079,64
DQRF0080,<data>.apply(lambda x: (str(x[cde])[<#>CDESIndex<#>:<#>CDEEIndex<#>] == str(x[<#>Column1<#>])[<#>ColSIndex<#>:<#>ColEIndex<#>]),Other,"['CDESIndex', 'CDEEIndex', 'Column1', 'ColSIndex', 'ColEIndex']",Checks that a substring of <cde> (from <#>CDESIndex<#> to <#>CDEEIndex<#>) matches a substring of <#>Column1<#> (from <#>ColSIndex<#> to <#>ColEIndex<#>).,Checks that a substring of <cde> (from  to ) matches a substring of  (from  to ).,0,DQRF0080,65
DQRF0080_01,"<data>.apply(lambda x: (str(x[cde])[<#>startIndexA<#>:<#>endIndexA<#>] <#>Operator<#> str(x[<#>Column<#>])[<#>startIndexB<#>:<#>endIndexB<#>]) if ((not pd.isnull(x[cde])) and (len(str(x[cde]).strip()) > 0)) else True,axis=1)",Completeness,"['startIndexA', 'endIndexA', 'Operator', 'Column', 'startIndexB', 'endIndexB']",Compares substrings from <cde> (defined by <#>startIndexA<#> and <#>endIndexA<#>) and <#>Column<#> (defined by <#>startIndexB<#> and <#>endIndexB<#>) using a specified operator (<#>Operator<#>). Validation is applied only if <cde> is not null or empty. Null or empty values pass by default.,Compares substrings from <cde> (defined by  and ) and  (defined by  and ) using a specified operator (). Validation is applied only if <cde> is not null or empty. Null or empty values pass by default.,0,DQRF0080,65
DQRF0096,"<data>.fillna(0).apply(lambda x: re.search(<#>pattern<#>,str(int(x[cde]))),axis=1).astype(bool)",Other,['pattern'],"Validates <cde> against a regex pattern (<#>pattern<#>), treating <cde> as an integer after filling null values with 0.","Validates <cde> against a regex pattern (), treating <cde> as an integer after filling null values with 0.",0,DQRF0096,66
DQRF0175,"<data>[[cde]].apply(lambda x: False if any(c in x[cde] for c in <#>Lista<#>) else True , axis = 1)",Validity,['Lista'],Ensures that <cde> does not contain any characters from a specified list (<#>Lista<#>). Returns False if any character in <#>Lista<#> is found in <cde>.,Ensures that <cde> does not contain any characters from a specified list (). Returns False if any character in  is found in <cde>.,0,DQRF0175,67
DQRF0176,"((<data>[<#>Column1<#>].astype(""float64"") 0.60) + (<data>[<#>Column2<#>].astype(""float64"")0.40))<#>Operator1<#><data>[cde].astype(""float64"")",Other,"['Column1', 'Column2', 'Operator1']",Checks that a weighted sum of <#>Column1<#> (weighted by 0.60) and <#>Column2<#> (weighted by 0.40) satisfies a specified condition (<#>Operator1<#>) when compared to <cde>. All columns are treated as floats for validation.,Checks that a weighted sum of  (weighted by 0.60) and  (weighted by 0.40) satisfies a specified condition () when compared to <cde>. All columns are treated as floats for validation.,0,DQRF0176,68
DQRF0178,"<data>.apply(lambda x: False if bool(re.search(r'^\d*.\d{<#>DecimalComplement<#>,}',str(x[cde]))) else True, axis=1)",Other,['DecimalComplement'],Ensures that <cde> does not contain a decimal part with more than a specified number of digits (<#>DecimalComplement<#>).,Ensures that <cde> does not contain a decimal part with more than a specified number of digits ().,0,DQRF0178,69
DQRF0178_1,"<data>.apply(lambda x: bool(re.search(fr'^[0-9]{{{<#>MinIntVal<#>},{<#>MaxIntVal<#>}}}.[0-9]{{{<#>MinDecVal<#>},{<#>MaxDecVal<#>}}}$', str(x[cde]))), axis=1)",Other,"['MinIntVal', 'MaxIntVal', 'MinDecVal', 'MaxDecVal']","Validates that <cde> matches a pattern representing a number with an integer part having a length between <#>MinIntVal<#> and <#>MaxIntVal<#>, and a mandatory decimal part with a length between <#>MinDecVal<#> and <#>MaxDecVal<#>.","Validates that <cde> matches a pattern representing a number with an integer part having a length between  and , and a mandatory decimal part with a length between  and .",0,DQRF0178,69
DQRF0178_2,"<data>.apply(lambda x: bool(re.search(fr'^-?[0-9]{{{<#>MinIntVal<#>},{<#>MaxIntVal<#>}}}(?:.[0-9]{{{<#>MinDecVal<#>},{<#>MaxDecVal<#>}}})?$', str(x[cde]))), axis=1)",Other,"['MinIntVal', 'MaxIntVal', 'MinDecVal', 'MaxDecVal']","Ensures <cde> matches a pattern for a number that can optionally have a decimal part. The integer part must have a length between <#>MinIntVal<#> and <#>MaxIntVal<#>, and if present, the decimal part must have a length between <#>MinDecVal<#> and <#>MaxDecVal<#>. Allows optional negative signs.","Ensures <cde> matches a pattern for a number that can optionally have a decimal part. The integer part must have a length between  and , and if present, the decimal part must have a length between  and . Allows optional negative signs.",0,DQRF0178,69
DQRF0178_3,"<data>.apply(lambda x: bool(re.search(fr'^-?[0-9]{{{<#>MinIntVal<#>},{<#>MaxIntVal<#>}}}$', str(x[cde]))), axis=1)",Other,"['MinIntVal', 'MaxIntVal']",Validates that <cde> is an integer with a length between <#>MinIntVal<#> and <#>MaxIntVal<#>. Allows optional negative signs.,Validates that <cde> is an integer with a length between  and . Allows optional negative signs.,0,DQRF0178,69
DQRF0185,"<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,str(x[<#>Column1<#>])),axis=1).astype(bool)",Other,"['pattern', 'Column1']",Checks if <#>Column1<#> matches a given regex pattern (<#>pattern<#>). Null values are replaced with an empty string before applying the validation.,Checks if  matches a given regex pattern (). Null values are replaced with an empty string before applying the validation.,0,DQRF0185,70
DQRF0188,"~<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,str(x[<#>Column1<#>])),axis=1).astype(bool)",Other,"['pattern', 'Column1']",Ensures <#>Column1<#> does not match a given regex pattern (<#>pattern<#>). Null values are replaced with an empty string before applying the validation.,Ensures  does not match a given regex pattern (). Null values are replaced with an empty string before applying the validation.,0,DQRF0188,71
DQRF0204,"<data>.fillna('').apply(lambda x: re.search(<#>pattern<#>,str(x[cde])) or x[cde]==<#>value<#>,axis=1).astype(bool)",Other,"['pattern', 'value']",Validates <cde> against a regex pattern (<#>pattern<#>) or checks if <cde> equals a specific value (<#>value<#>). Either condition passing will satisfy the rule.,Validates <cde> against a regex pattern () or checks if <cde> equals a specific value (). Either condition passing will satisfy the rule.,0,DQRF0204,72
DQRF0213,"<data>[[cde,<#>Column1<#>]].fillna('').apply(lambda x: ( (len(str(x[<#>Column1<#>]).strip()) > 0 and datetime.strptime(str(x[cde])[<#>indexCDES<#>:<#>indexCDEE<#>],<#>frmtDte1<#>) == datetime.strptime(str(x[<#>Column1<#>])[<#>indexC1S<#>:<#>indexC1E<#>],<#>frmtDte1<#>) ) or (len(str(x[<#>Column1<#>])) == 0) ) if ( pd.notnull(x[<#>Column1<#>]) and len(str(x['CURP']).strip()) > 0) else True ,axis=1 ).astype(bool)",Completeness,"['Column1', 'Column1', 'indexCDES', 'indexCDEE', 'frmtDte1', 'Column1', 'indexC1S', 'indexC1E', 'frmtDte1', 'Column1', 'Column1']","Validates that a substring from <cde> matches a substring from <#>Column1<#> using specified indexes and a date format <#>frmtDte1<#>. If <#>Column1<#> is empty, the rule passes. Checks are applied only if both <cde> and <#>Column1<#> are not null.","Validates that a substring from <cde> matches a substring from  using specified indexes and a date format . If  is empty, the rule passes. Checks are applied only if both <cde> and  are not null.",0,DQRF0213,73
DQRF0214,"<data>.apply(lambda x:(len(str(x[cde]).split('.')[0]) <#>Operator1<#> <#>length_max<#>),axis=1)",Other,"['Operator1', 'length_max']",Ensures that the length of the integer part of <cde> (before the decimal) satisfies a specified condition (<#>Operator1<#> and <#>length_max<#>).,Ensures that the length of the integer part of <cde> (before the decimal) satisfies a specified condition ( and ).,0,DQRF0214,74
DQRF0215,"<data>.apply(lambda x: len(str(x[cde]).split('.')[0].rstrip('0')) <#>Operator1<#> <#>length_max<#> or str(x[cde]).endswith('.0'),axis=1)",Consistency,"['Operator1', 'length_max']","Similar to DQRF0214, but also validates that if <cde> ends with .0, the condition passes regardless of the length of the integer part.","Similar to DQRF0214, but also validates that if <cde> ends with .0, the condition passes regardless of the length of the integer part.",0,DQRF0215,75
DQRF0226,"<data>[cde].apply(lambda x: bool(re.search(<#>pattern<#>,x.split(<#>Sep<#>)[<#>ColNumber<#>] )) if len(x.split(""/"")) >= <#>Columns<#> else False)",Other,"['pattern', 'Sep', 'ColNumber', 'Columns']",Validates that a specific segment of <cde> (split by a separator <#>Sep<#>) matches a regex pattern (<#>pattern<#>). The segment is identified by <#>ColNumber<#>. Fails if the number of segments is less than <#>Columns<#>.,Validates that a specific segment of <cde> (split by a separator ) matches a regex pattern (). The segment is identified by . Fails if the number of segments is less than .,0,DQRF0226,76
DQRF0227,"<data>.apply(lambda x: True if x[cde].split(<#>Sep<#>)[<#>ColNumber<#>] == x[<#>Column1<#>].strip() else False if len(x[cde].split(<#>Sep<#>)) > <#>Columns<#> else False, axis = 1)",Completeness,"['Sep', 'ColNumber', 'Column1', 'Sep', 'Columns']",Checks if a specific segment of <cde> (split by <#>Sep<#>) matches <#>Column1<#>. Fails if the number of segments in <cde> exceeds <#>Columns<#> or if the specific segment does not match <#>Column1<#>.,Checks if a specific segment of <cde> (split by ) matches . Fails if the number of segments in <cde> exceeds  or if the specific segment does not match .,0,DQRF0227,77
DQRF0271,"<data>[[cde,<#>Column1<#>]].fillna('').apply(lambda x: ( (len(str(x[<#>Column1<#>])) > 0) & ( datetime.strptime(str(x[<#>Column1<#>])[<#>indexC1S<#>:<#>indexC1E<#>]+str(x[cde])[<#>indexCDES<#>:<#>indexCDEE<#>],<#>frmtDte1<#>) == datetime.strptime(str(x[<#>Column1<#>]),<#>frmtDte1<#>) ) )",Other,"['Column1', 'Column1', 'Column1', 'indexC1S', 'indexC1E', 'indexCDES', 'indexCDEE', 'frmtDte1', 'Column1', 'frmtDte1']",Validates that a substring from <#>Column1<#> (defined by <#>indexC1S<#> and <#>indexC1E<#>) concatenated with a substring from <cde> (defined by <#>indexCDES<#> and <#>indexCDEE<#>) matches <#>Column1<#> when formatted as a date (<#>frmtDte1<#>).,Validates that a substring from  (defined by  and ) concatenated with a substring from <cde> (defined by  and ) matches  when formatted as a date ().,0,DQRF0271,78
DQRF0272,"(<data>[cde].apply(lambda x: not bool(re.match(<#>expression1<#>, x.strip())) or bool(re.match(<#>expression1<#> + <#>expression2<#>, strip()))))",Completeness,"['expression1', 'expression1', 'expression2']",Ensures that <cde> does not match the first regex pattern (<#>expression1<#>) unless it also matches the combined regex pattern of <#>expression1<#> and <#>expression2<#>.,Ensures that <cde> does not match the first regex pattern () unless it also matches the combined regex pattern of  and .,0,DQRF0272,79
DQRF0273,"<data>.apply(lambda x: (bool((re.search(fr'^[0-9]{{{<#>MinIntVal<#>},{<#>MaxIntVal<#>}}}.[0-9]{{{<#>MinDecVal<#>},{<#>MaxDecVal<#>}}}$', str(x[cde])))) ) or (pd.isna(x[cde])) if ((isinstance(float(x[cde]),float))) else False, axis = 1)",Other,"['MinIntVal', 'MaxIntVal', 'MinDecVal', 'MaxDecVal']",Validates that <cde> is either null or matches a pattern for a number with an integer part (<#>MinIntVal<#> to <#>MaxIntVal<#>) and a decimal part (<#>MinDecVal<#> to <#>MaxDecVal<#>). Only checks if <cde> is convertible to a float.,Validates that <cde> is either null or matches a pattern for a number with an integer part ( to ) and a decimal part ( to ). Only checks if <cde> is convertible to a float.,0,DQRF0273,80
DQRF0274,"<data>.fillna('').apply(lambda x: bool(re.compile(r <#>pattern<#>, re.IGNORECASE).search(x[cde])), axis=1)",Other,['pattern'],"Ensures that <cde> matches a regex pattern (<#>pattern<#>), ignoring case sensitivity. Null values are replaced with an empty string before validation.","Ensures that <cde> matches a regex pattern (), ignoring case sensitivity. Null values are replaced with an empty string before validation.",0,DQRF0274,81
DQRF0274_0,"~<data>.fillna('').apply(lambda x: bool(re.compile(<#>pattern<#>, re.IGNORECASE).search(x[cde])), axis=1)",Other,['pattern'],"Ensures that <cde> does not match a regex pattern (<#>pattern<#>), ignoring case sensitivity. Null values are replaced with an empty string before validation.","Ensures that <cde> does not match a regex pattern (), ignoring case sensitivity. Null values are replaced with an empty string before validation.",0,DQRF0274,81
DQRF0274_1,"<data>.fillna('').apply(lambda x: not bool(re.compile(r <#>pattern<#>, re.IGNORECASE).search(x[cde])), axis=1)",Other,['pattern'],"Validates that <cde> does not match a regex pattern (<#>pattern<#>), ignoring case sensitivity. Similar to DQRF0274_0 but uses a different implementation style.","Validates that <cde> does not match a regex pattern (), ignoring case sensitivity. Similar to DQRF0274_0 but uses a different implementation style.",0,DQRF0274,81
DQRF0274_2,~<data>.fillna('').apply(lambda x: bool(re.compile(r'\b(S[\/.-\s]?N,Other,[],"Ensures that <cde> does not contain specific patterns like ""S/N"" (case-insensitive). Validation includes additional rules for customized patterns.","Ensures that <cde> does not contain specific patterns like ""S/N"" (case-insensitive). Validation includes additional rules for customized patterns.",0,DQRF0274,81
DQRF0274_3,"<data>.fillna('').apply(lambda x: not bool(re.compile(r'(.)\1{<#>RepeatednChars<#>,}', re.IGNORECASE).search(x[cde])), axis=1)",Other,['RepeatednChars'],"Checks that <cde> does not contain any character repeated more than <#>RepeatednChars<#> times consecutively, ignoring case sensitivity.","Checks that <cde> does not contain any character repeated more than  times consecutively, ignoring case sensitivity.",0,DQRF0274,81
DQRI0106,"<data>.apply(lambda x: (str(x[<#>Column1<#>]) >= str(x[cde]) and str(x[cde]) >= str(x[<#>Column2<#>])) if (str(x[cde]) not in (<#>Lista<#>)) else True ,axis=1)",Other,"['Column1', 'Column2', 'Lista']","Ensures that <cde> falls between <#>Column2<#> and <#>Column1<#> (inclusive) if <cde> is not in a specified list (<#>Lista<#>). Otherwise, the rule passes.","Ensures that <cde> falls between  and  (inclusive) if <cde> is not in a specified list (). Otherwise, the rule passes.",0,DQRI0106,82
DQRI0108,"<data>.apply(lambda x: (str(x[<#>Column1<#>]) >= str(x[cde]) and str(x[cde]) > str(x[<#>Column2<#>])) if (str(x[cde]) not in (<#>Lista<#>)) else True ,axis=1)",Other,"['Column1', 'Column2', 'Lista']",Similar to DQRI0106 but enforces a strict greater-than condition for <cde> compared to <#>Column2<#>.,Similar to DQRI0106 but enforces a strict greater-than condition for <cde> compared to .,0,DQRI0108,83
DQRI0109,"<data>.apply(lambda x: (str(x[<#>Column1<#>]) >= str(x[cde]) and str(x[cde]) >= str(x[<#>Column2<#>])) and str(x[<#>Column2<#>]) >= str(x[<#>Column3<#>])) if (str(x[cde]) not in (<#>Lista<#>)) else True ,axis=1)",Other,"['Column1', 'Column2', 'Column2', 'Column3', 'Lista']","Validates that <cde> falls between <#>Column2<#> and <#>Column1<#> (inclusive), and that <#>Column2<#> is greater than or equal to <#>Column3<#>. Applies only if <cde> is not in a specified list (<#>Lista<#>).","Validates that <cde> falls between  and  (inclusive), and that  is greater than or equal to . Applies only if <cde> is not in a specified list ().",0,DQRI0109,84
DQRU0004,~<data>[cde].duplicated(),Other,[],Ensures that <cde> does not contain duplicate values.,Ensures that <cde> does not contain duplicate values.,0,DQRU0004,85
DQRU0004_1,"<data>.apply(lambda x: x.sort_values(by=x[<#>Column1<#>], ascending = False).drop_duplicates(keep = 'first', inplace = True))",Other,['Column1'],"Removes duplicates from <#>Column1<#>, keeping the first occurrence after sorting by descending order.","Removes duplicates from , keeping the first occurrence after sorting by descending order.",-1,DQRU0004,85
DQRU0127,~<data>[cde].duplicated(),Other,[],Ensures that <cde> does not contain duplicate values. Similar to DQRU0004.,Ensures that <cde> does not contain duplicate values. Similar to DQRU0004.,0,DQRU0127,86
DQRU0128,~<data>[cde].duplicated(),Other,[],"Similar to DQRU0127, ensures that <cde> does not contain duplicate values.","Similar to DQRU0127, ensures that <cde> does not contain duplicate values.",0,DQRU0128,87
DQRU0141,(~<data>[<#>Column1<#>].duplicated())&(<data>[<#>Column1<#>].str.strip().str.len()>0)&(~<data>[<#>Column1<#>].isnull())&(<data>[<#>Column1<#>].str.strip()!= '-'),Completeness,"['Column1', 'Column1', 'Column1', 'Column1']","Ensures that <#>Column1<#> does not contain duplicate values, is non-null, has a non-zero length after stripping whitespace, and does not equal '-'.","Ensures that  does not contain duplicate values, is non-null, has a non-zero length after stripping whitespace, and does not equal '-'.",0,DQRU0141,88
DQRU0141_1,(~<data>[<#>Column1<#>].duplicated())&(<data>[<#>Column1<#>]!=0)&(~<data>[<#>Column1<#>].isnull())&(<data>[<#>Column1<#>]!= '-'),Other,"['Column1', 'Column1', 'Column1', 'Column1']","Similar to DQRU0141, but additionally ensures that <#>Column1<#> is not equal to 0.","Similar to DQRU0141, but additionally ensures that  is not equal to 0.",0,DQRU0141,88
DQRU0142,(~<data>[cde].duplicated())&(<data>[cde].str.strip().str.len()>0)&(~<data>[cde].isnull())&(<data>[cde].str.strip()!= '-'),Completeness,[],"Ensures that <cde> does not contain duplicate values, is non-null, has a non-zero length after stripping whitespace, and does not equal '-'.","Ensures that <cde> does not contain duplicate values, is non-null, has a non-zero length after stripping whitespace, and does not equal '-'.",0,DQRU0142,89
DQRU0146,~<data>.duplicated(<#>ColumnList<#>),Other,['ColumnList'],Ensures that rows in <data> are unique based on a specified set of columns (<#>ColumnList<#>).,Ensures that rows in <data> are unique based on a specified set of columns ().,0,DQRU0146,90
DQRU0150,"(~<data>[[cde,<#>Column1<#>]].duplicated())&(<data>[<#>Column1<#>].str.strip().str.len()>0)&(~<data>[<#>Column1<#>].isnull())&(<data>[<#>Column1<#>].str.strip()!= '-')&(<data>[cde].str.strip().str.len()>0)&(~<data>[cde].isnull())&(<data>[cde].str.strip()!= '-')",Completeness,"['Column1', 'Column1', 'Column1', 'Column1']","Validates that <cde> and <#>Column1<#> are both non-null, have non-zero lengths after stripping whitespace, do not equal '-', and do not have duplicate values as a pair.","Validates that <cde> and  are both non-null, have non-zero lengths after stripping whitespace, do not equal '-', and do not have duplicate values as a pair.",0,DQRU0150,91
DQRU0161,"ExecutionRules.fonetica('',<data>,cde,<#>threshold<#>)",Other,['threshold'],Checks phonetic similarity between <cde> values and other data in <data> using a specified threshold (<#>threshold<#>).,Checks phonetic similarity between <cde> values and other data in <data> using a specified threshold ().,0,DQRU0161,92
DQRU0211,"<data>.apply(lambda x:(x[<#>Column1<#>]!=True ), axis=1)",Other,['Column1'],Ensures that the value in <#>Column1<#> is not True.,Ensures that the value in  is not True.,0,DQRU0211,93
DQRV0002,<data>[cde].astype(float) <#>Operator<#> float(<#>compare<#>),Other,"['Operator', 'compare']",Validates that <cde> satisfies a numeric comparison (<#>Operator<#> and <#>compare<#>) after being converted to a float.,Validates that <cde> satisfies a numeric comparison ( and ) after being converted to a float.,0,DQRV0002,94
DQRV0002_01,(<data>[cde].astype(float) <#>Operator1<#> float(<#>compare1<#>))&(<data>[cde].astype(float) <#>Operator2<#> float(<#>compare2<#>)),Other,"['Operator1', 'compare1', 'Operator2', 'compare2']","Ensures that <cde> satisfies two numeric comparisons, defined by <#>Operator1<#>/<#>compare1<#> and <#>Operator2<#>/<#>compare2<#>.","Ensures that <cde> satisfies two numeric comparisons, defined by / and /.",0,DQRV0002,94
DQRV0002_02,(<data>[cde].astype(float) <#>Operator1<#> float(<#>compare1<#>)),Other,"['Operator1', 'compare1']",Similar to DQRV0002 but only validates one numeric comparison.,Similar to DQRV0002 but only validates one numeric comparison.,0,DQRV0002,94
DQRV0002_03,(<data>[cde] <#>Operator<#> <#>compare<#>),Other,"['Operator', 'compare']",Checks that <cde> satisfies a comparison (<#>Operator<#> and <#>compare<#>).,Checks that <cde> satisfies a comparison ( and ).,0,DQRV0002,94
DQRV0002_04,(~<data>[<#>Column1<#>].isin(<#>lista<#>)),Validity,"['Column1', 'lista']",Validates that <#>Column1<#> is not part of a specified list (<#>lista<#>).,Validates that  is not part of a specified list ().,0,DQRV0002,94
DQRV0002_2,<data>[cde] == <data>[<#>Column1<#>],Other,['Column1'],Ensures that <cde> equals the value in <#>Column1<#>.,Ensures that <cde> equals the value in .,0,DQRV0002,94
DQRV0009,<data>[cde].isin(<#>catalog<#>[<#>key<#>]),Validity,"['catalog', 'key']",Checks if <cde> is present in a catalog (<#>catalog<#>) for a specific key (<#>key<#>).,Checks if <cde> is present in a catalog () for a specific key ().,0,DQRV0009,95
DQRV0009_01,<data>[cde].isin(<#>catalog<#>[<#>key<#>]),Validity,"['catalog', 'key']","Similar to DQRV0009, ensures that <cde> exists in the specified catalog.","Similar to DQRV0009, ensures that <cde> exists in the specified catalog.",0,DQRV0009,95
DQRV0009_02,<data>[<#>Column1<#>].isin(<#>catalog<#>[<#>key<#>]),Validity,"['Column1', 'catalog', 'key']",Validates that <#>Column1<#> exists in the specified catalog (<#>catalog<#>).,Validates that  exists in the specified catalog ().,0,DQRV0009,95
DQRV0009_03,~<data>[<#>RecordID<#>].astype(float).isin(<#>catalog<#>[<#>key<#>].astype(float)),Validity,"['RecordID', 'catalog', 'key']",Ensures that <#>RecordID<#> (converted to float) is not present in a catalog (<#>catalog<#>) after being converted to float.,Ensures that  (converted to float) is not present in a catalog () after being converted to float.,-1,DQRV0009,95
DQRV0009_04,"<data>.apply(lambda x: x[cde] in <#>catalog<#>[<#>key<#>].values if x[<#>Column1<#>] in <#>Lista<#> else True, axis=1)",Validity,"['catalog', 'key', 'Column1', 'Lista']","Checks if <cde> is present in a catalog for a specific key, but only when <#>Column1<#> is in a specified list (<#>Lista<#>).","Checks if <cde> is present in a catalog for a specific key, but only when  is in a specified list ().",0,DQRV0009,95
DQRV0009_05,"<data>.apply(lambda x: x[cde] in(<#>catalog<#>[<#>key<#>].values) if (str(x[<#>Column1<#>]) not in (<#>Lista1<#>)) or (x[<#>Column2<#>] in (<#>Lista2<#>)) else True, axis=1)",Other,"['catalog', 'key', 'Column1', 'Lista1', 'Column2', 'Lista2']",Ensures that <cde> exists in a catalog if <#>Column1<#> is not in a list (<#>Lista1<#>) or <#>Column2<#> is in another list (<#>Lista2<#>).,Ensures that <cde> exists in a catalog if  is not in a list () or  is in another list ().,0,DQRV0009,95
DQRV0009_06,((<data>[cde].isin(<#>catalog<#>[<#>key<#>]) & ( (~<data>[<#>Column1<#>].isin( <#>Lista1<#>)),Validity,"['catalog', 'key', 'Column1', 'Lista1']",Combines conditions to ensure <cde> exists in a catalog and <#>Column1<#> is not in a specified list (<#>Lista1<#>).,Combines conditions to ensure <cde> exists in a catalog and  is not in a specified list ().,0,DQRV0009,95
DQRV0009_07,"<data>[[cde, <#>Column2<#>]].merge(<#>catalog<#>[[<#>key<#>,<#>Column1<#>]], left_on=cde, right_on=<#>key<#>, how='left').apply(lambda x: <#>ValsDict<#>[x[<#>Column1<#>]] == x[<#>Column2<#>], axis=1)",Other,"['Column2', 'catalog', 'key', 'Column1', 'key', 'ValsDict', 'Column1', 'Column2']",Merges <data> with a catalog and validates that the mapped value from the catalog for <#>Column1<#> matches <#>Column2<#>.,Merges <data> with a catalog and validates that the mapped value from the catalog for  matches .,0,DQRV0009,95
DQRV0009_08,"<data>[[cde, <#>Column2<#>]].merge(<#>catalog<#>[[<#>key<#>,<#>Column1<#>]], left_on=cde, right_on=<#>key<#>, how='left').apply(lambda x: {<#>Col1Val1<#>:<#>Col2Val1<#>, <#>Col1Val2<#>:<#>Col2Val2<#>, <#>Col1Val3<#>:<#>Col2Val3<#>}[x[<#>Column1<#>]] == x[<#>Column2<#>], axis=1)",Other,"['Column2', 'catalog', 'key', 'Column1', 'key', 'Col1Val1', 'Col2Val1', 'Col1Val2', 'Col2Val2', 'Col1Val3', 'Col2Val3', 'Column1', 'Column2']",Similar to DQRV0009_07 but validates the mapping using a dictionary of expected values for <#>Column1<#> and <#>Column2<#>.,Similar to DQRV0009_07 but validates the mapping using a dictionary of expected values for  and .,0,DQRV0009,95
DQRV0014,"^[0-9]{1,14}.[0-9]{2}$",Other,[],Ensures that <cde> matches a numeric format with up to 14 digits before the decimal and exactly 2 digits after.,Ensures that <cde> matches a numeric format with up to 14 digits before the decimal and exactly 2 digits after.,0,DQRV0014,96
DQRV0016,cde = compare,Other,[],Validates that <cde> equals the value of compare.,Validates that <cde> equals the value of compare.,0,DQRV0016,97
DQRV0019,"<data>.apply(lambda x: ExecutionRules.checkValid_Date('',str(x[cde]),<#>frmtDte<#>),axis=1)",Other,['frmtDte'],Checks if <cde> is a valid date in the format <#>frmtDte<#> using a date validation function.,Checks if <cde> is a valid date in the format  using a date validation function.,0,DQRV0019,98
DQRV0020,"<data>.apply(lambda x: rulesClass.compare_Date(x[cde],x[<#>Column1<#>],<#>frmtDte1<#>,<#>frmtDte2<#>),axis=1)",Other,"['Column1', 'frmtDte1', 'frmtDte2']","Compares <cde> with <#>Column1<#> as dates, using formats <#>frmtDte1<#> and <#>frmtDte2<#>.","Compares <cde> with  as dates, using formats  and .",0,DQRV0020,99
DQRV0022,"cde isin ['A','B','C','D']",Other,[],"Ensures that <cde> is one of the specified values: 'A', 'B', 'C', or 'D'.","Ensures that <cde> is one of the specified values: 'A', 'B', 'C', or 'D'.",0,DQRV0022,100
DQRV0023,<data>[cde].isin(<#>Lista<#>),Validity,['Lista'],Checks if <cde> is part of a specified list (<#>Lista<#>).,Checks if <cde> is part of a specified list ().,0,DQRV0023,101
DQRV0023_1,<data>[<#>Column1<#>].isin(<#>Lista<#>),Validity,"['Column1', 'Lista']",Validates that <#>Column1<#> is part of a specified list (<#>Lista<#>).,Validates that  is part of a specified list ().,0,DQRV0023,101
DQRV0023_2,~<data>[cde].isin(<#>Lista<#>),Validity,['Lista'],Ensures that <cde> is not part of a specified list (<#>Lista<#>).,Ensures that <cde> is not part of a specified list ().,0,DQRV0023,101
DQRV0024,(( (<data>[cde] == <#>TipoPersona<#>) & (<data>[<#>Column1<#>].str[:1] != <#>char<#>)),Other,"['TipoPersona', 'Column1', 'char']","Ensures that if <cde> equals <#>TipoPersona<#>, the first character of <#>Column1<#> does not equal <#>char<#>.","Ensures that if <cde> equals , the first character of  does not equal .",0,DQRV0024,102
DQRV0032,cde contain specific characters,Other,[],Validates that <cde> contains specific characters as defined by the business logic.,Validates that <cde> contains specific characters as defined by the business logic.,0,DQRV0032,103
